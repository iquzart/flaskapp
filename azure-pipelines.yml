# Azure DevOps Pipeline
# CI:  Docker Build
# CD:  Ansible, Docker Compose



trigger:
  branches:
    include:
    - master
    - development
  paths:
    #include:
    exclude:
    - chart/* 
    - pipeline.yml
    - README.md
  #tags:
    #include:
    #- v2.*
    #exclude:
    #- v2.0

# Don't run against PRs
pr: none

variables:
- group: FlaskApp # Variable Group Name

- name: tag
  value:  $(Build.SourceBranchName)-$(GitShortSha)

- name: containerRegistryServiceConnection
  value: 'Docker Hub'

- name: imageRepository
  value: 'diquzart/flaskapp'

- name: environment-dev
  value: 'dev-XXXXX'

- name: environment-prod
  value: 'XXXXXXX'

  

stages:
- stage: Build
  displayName: Build image

  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImageName: 'ubuntu-latest'

    steps:
    - checkout: self
      clean: true
      displayName: Cleaning local repo

    - script: GitShortSha=`git rev-parse --short HEAD` && echo "##vso[task.setvariable variable=GitShortSha]$GitShortSha"
      displayName: Set the Git Short SHA as an environment variablie

    - task: Docker@2
      displayName: Build Container Image
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
        
    - task: Docker@2
      displayName: Push Image to Container Registry
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - task: Bash@3
      displayName: Set variables to share between stages 
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(System.DefaultWorkingDirectory)
          echo $(tag) > $(System.DefaultWorkingDirectory)/tag

          echo "Checking VAR Library"
          echo $(CONNECTSTRING)


    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: 'drop'

